<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
		>
<channel>
	<title>Comments on: De-volatile Your Memcached. Upgrade to Membase</title>
	<atom:link href="http://www.bigfastblog.com/de-volatile-your-memcached-upgrade-to-membase/feed" rel="self" type="application/rss+xml" />
	<link>http://www.bigfastblog.com/de-volatile-your-memcached-upgrade-to-membase</link>
	<description>Big Fast Technology</description>
	<lastBuildDate>Mon, 05 May 2014 08:14:53 +0000</lastBuildDate>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>http://wordpress.org/?v=3.0.1</generator>
	<item>
		<title>By: printf(&#34; SaltwaterC &#34;); &#187; Blog Archive &#187; Use the cache Luke, Part 1: from memcached to Membase memcached buckets</title>
		<link>http://www.bigfastblog.com/de-volatile-your-memcached-upgrade-to-membase/comment-page-1#comment-4759</link>
		<dc:creator>printf(&#34; SaltwaterC &#34;); &#187; Blog Archive &#187; Use the cache Luke, Part 1: from memcached to Membase memcached buckets</dc:creator>
		<pubDate>Thu, 22 Sep 2011 06:42:18 +0000</pubDate>
		<guid isPermaLink="false">http://www.bigfastblog.com/?p=995#comment-4759</guid>
		<description>[...] start with a quote: Matt Ingenthron said internally at Membase Inc they view Memcached as a rabbit. It is fast, but it [...]</description>
		<content:encoded><![CDATA[<p>[...] start with a quote: Matt Ingenthron said internally at Membase Inc they view Memcached as a rabbit. It is fast, but it [...]</p>
]]></content:encoded>
	</item>
	<item>
		<title>By: Perry Krug</title>
		<link>http://www.bigfastblog.com/de-volatile-your-memcached-upgrade-to-membase/comment-page-1#comment-4106</link>
		<dc:creator>Perry Krug</dc:creator>
		<pubDate>Sat, 06 Aug 2011 23:01:07 +0000</pubDate>
		<guid isPermaLink="false">http://www.bigfastblog.com/?p=995#comment-4106</guid>
		<description>Consistent hashing does make the addition/removal of servers &quot;less&quot; impactful, but it&#039;s not perfect.  As a database, Membase (and now Couchbase Server) needed to be perfectly consistent and the vbucket concept has been extremely valuable to our project. 

As simply a memcached replacement, Membase does offer a number of other advantages like replication and failover, as well as persistence to disk (though some argue that a cache shouldn&#039;t have to be persistent).  With the introduction of CouchDB underneath (creating the Couchbase Server 2.0 product) you also get robust indexing and map-reduce functionality (useful even in a &quot;cache&quot;) and cross datacenter replication is close on the horizon.

We believe that memcached is still an extremely valuable technology and has many valid use cases, we even have customers running &quot;standard&quot; memcached within their Membase cluster.  Mostly for the enhanced monitoring and clustering that we bring to it, but also for much more transient data that they truly just need a volatile cache for.

Full disclosure, I&#039;m a bit biased having worked at Couchbase (formerly Membase, formerly NorthScale) for over a year now, but there is some seriously cool and useful technology being born before our eyes.

Perry Krug
Sr. Solutions Architect, Couchbase
perry@couchbase.com</description>
		<content:encoded><![CDATA[<p>Consistent hashing does make the addition/removal of servers &#8220;less&#8221; impactful, but it&#8217;s not perfect.  As a database, Membase (and now Couchbase Server) needed to be perfectly consistent and the vbucket concept has been extremely valuable to our project. </p>
<p>As simply a memcached replacement, Membase does offer a number of other advantages like replication and failover, as well as persistence to disk (though some argue that a cache shouldn&#8217;t have to be persistent).  With the introduction of CouchDB underneath (creating the Couchbase Server 2.0 product) you also get robust indexing and map-reduce functionality (useful even in a &#8220;cache&#8221;) and cross datacenter replication is close on the horizon.</p>
<p>We believe that memcached is still an extremely valuable technology and has many valid use cases, we even have customers running &#8220;standard&#8221; memcached within their Membase cluster.  Mostly for the enhanced monitoring and clustering that we bring to it, but also for much more transient data that they truly just need a volatile cache for.</p>
<p>Full disclosure, I&#8217;m a bit biased having worked at Couchbase (formerly Membase, formerly NorthScale) for over a year now, but there is some seriously cool and useful technology being born before our eyes.</p>
<p>Perry Krug<br />
Sr. Solutions Architect, Couchbase<br />
<a href="mailto:perry@couchbase.com">perry@couchbase.com</a></p>
]]></content:encoded>
	</item>
	<item>
		<title>By: Phil Whelan</title>
		<link>http://www.bigfastblog.com/de-volatile-your-memcached-upgrade-to-membase/comment-page-1#comment-4105</link>
		<dc:creator>Phil Whelan</dc:creator>
		<pubDate>Sat, 06 Aug 2011 21:26:33 +0000</pubDate>
		<guid isPermaLink="false">http://www.bigfastblog.com/?p=995#comment-4105</guid>
		<description>Thanks Peter. I had not come across this concept. 

Here&#039;s a little explanation for other readers...
&lt;a href=&quot;http://code.google.com/p/memcached/wiki/FAQ#What_is_a_%22consistent_hashing%22_client?&quot; rel=&quot;nofollow&quot;&gt;http://code.google.com/p/memcached/wiki/FAQ&lt;/a&gt;

Here is a Ruby implementation...
&lt;a href=&quot;http://www.mikeperham.com/2009/01/14/consistent-hashing-in-memcache-client/&quot; rel=&quot;nofollow&quot;&gt;http://www.mikeperham.com/2009/01/14/consistent-hashing-in-memcache-client/&lt;/a&gt;</description>
		<content:encoded><![CDATA[<p>Thanks Peter. I had not come across this concept. </p>
<p>Here&#8217;s a little explanation for other readers&#8230;<br />
<a href="http://code.google.com/p/memcached/wiki/FAQ#What_is_a_%22consistent_hashing%22_client?" rel="nofollow">http://code.google.com/p/memcached/wiki/FAQ</a></p>
<p>Here is a Ruby implementation&#8230;<br />
<a href="http://www.mikeperham.com/2009/01/14/consistent-hashing-in-memcache-client/" rel="nofollow">http://www.mikeperham.com/2009/01/14/consistent-hashing-in-memcache-client/</a></p>
]]></content:encoded>
	</item>
	<item>
		<title>By: Peter Smith</title>
		<link>http://www.bigfastblog.com/de-volatile-your-memcached-upgrade-to-membase/comment-page-1#comment-4104</link>
		<dc:creator>Peter Smith</dc:creator>
		<pubDate>Sat, 06 Aug 2011 18:56:51 +0000</pubDate>
		<guid isPermaLink="false">http://www.bigfastblog.com/?p=995#comment-4104</guid>
		<description>Great article, but just a quick note on memcache limitations. Consistent hashing  (the PHP APIs support this, and some other languages too) solves the problems that occur when memcache servers are added/removed from the pool, so this isn&#039;t really a reason not to use memcache (since there&#039;s a simple solution).</description>
		<content:encoded><![CDATA[<p>Great article, but just a quick note on memcache limitations. Consistent hashing  (the PHP APIs support this, and some other languages too) solves the problems that occur when memcache servers are added/removed from the pool, so this isn&#8217;t really a reason not to use memcache (since there&#8217;s a simple solution).</p>
]]></content:encoded>
	</item>
	<item>
		<title>By: Phil Whelan</title>
		<link>http://www.bigfastblog.com/de-volatile-your-memcached-upgrade-to-membase/comment-page-1#comment-846</link>
		<dc:creator>Phil Whelan</dc:creator>
		<pubDate>Tue, 25 Jan 2011 00:42:53 +0000</pubDate>
		<guid isPermaLink="false">http://www.bigfastblog.com/?p=995#comment-846</guid>
		<description>Wow! Thanks for the excellent feedback on the post, Perry. I will definitely incorporate all those points in future Membase posts. I appreciate the clarifications and all the pointers to more resources.</description>
		<content:encoded><![CDATA[<p>Wow! Thanks for the excellent feedback on the post, Perry. I will definitely incorporate all those points in future Membase posts. I appreciate the clarifications and all the pointers to more resources.</p>
]]></content:encoded>
	</item>
	<item>
		<title>By: Perry Krug</title>
		<link>http://www.bigfastblog.com/de-volatile-your-memcached-upgrade-to-membase/comment-page-1#comment-829</link>
		<dc:creator>Perry Krug</dc:creator>
		<pubDate>Sun, 23 Jan 2011 02:31:46 +0000</pubDate>
		<guid isPermaLink="false">http://www.bigfastblog.com/?p=995#comment-829</guid>
		<description>Phil, this is a fantastic blog…thank you very much.

A few points of clarification. Please take these as constructive criticism, you have done an excellent job up to here and I simply want to add a bit more detail for your/our readers:

- When talking about the hashing algorithm stuff, you are absolutely correct about how memcached handles things. You are also correct about how Membase handles the “re-routing” of client requests. However, we actually use “vBuckets” (not regular buckets…those are the logical keyspaces within a Membase cluster. Yes, I know it’s confusing…we apologize  .

- Membase doesn’t actually have a cluster size limit. You are correct that you can only have 1024 servers holding “active” data, but if you have more than 1024 nodes in the cluster, some will only be handling replica data. The cluster itself will still be viable. We are also planning on raising this limit in the future when we run into deployments that need it. 1024 was appropriate from a testing and qualification perspective for now. You are still correct about the chattiness of the nodes and that we are continuing development in this area.

- It’s worth pointing out that running Moxi on the client side is our best-practice for non-”smart” clients and will eliminate any extra network hops when retrieving data since Moxi can go directly to the Membase server for a particular key.

- ”smart” clients don’t actually embed Moxi within them…they simply contain the same logic that Moxi does. Take a look at the Enyim (http://memcached.enyim.com/) client and our updated spymemcached client for Java (http://wiki.membase.org/display/membase/prerelease+spymemcached+vBucket). We’ve also begun the process of writing a libmembase C library (http://trondn.blogspot.com/2010/12/building-libmembase.html). You can really think of Moxi as the first “smart” client…though it can do much more.

- It “may” be worthwhile calling out Membase’s features of replication and the TAP interface a bit more if you like…they’re rather key to the whole system (no pun intended)

Thanks again and I really look forward to your continuing investigation of Membase. Please let me know if there’s anything I can do to help in your pursuit.

Perry Krug</description>
		<content:encoded><![CDATA[<p>Phil, this is a fantastic blog…thank you very much.</p>
<p>A few points of clarification. Please take these as constructive criticism, you have done an excellent job up to here and I simply want to add a bit more detail for your/our readers:</p>
<p>- When talking about the hashing algorithm stuff, you are absolutely correct about how memcached handles things. You are also correct about how Membase handles the “re-routing” of client requests. However, we actually use “vBuckets” (not regular buckets…those are the logical keyspaces within a Membase cluster. Yes, I know it’s confusing…we apologize  .</p>
<p>- Membase doesn’t actually have a cluster size limit. You are correct that you can only have 1024 servers holding “active” data, but if you have more than 1024 nodes in the cluster, some will only be handling replica data. The cluster itself will still be viable. We are also planning on raising this limit in the future when we run into deployments that need it. 1024 was appropriate from a testing and qualification perspective for now. You are still correct about the chattiness of the nodes and that we are continuing development in this area.</p>
<p>- It’s worth pointing out that running Moxi on the client side is our best-practice for non-”smart” clients and will eliminate any extra network hops when retrieving data since Moxi can go directly to the Membase server for a particular key.</p>
<p>- ”smart” clients don’t actually embed Moxi within them…they simply contain the same logic that Moxi does. Take a look at the Enyim (<a href="http://memcached.enyim.com/" rel="nofollow">http://memcached.enyim.com/</a>) client and our updated spymemcached client for Java (<a href="http://wiki.membase.org/display/membase/prerelease+spymemcached+vBucket" rel="nofollow">http://wiki.membase.org/display/membase/prerelease+spymemcached+vBucket</a>). We’ve also begun the process of writing a libmembase C library (<a href="http://trondn.blogspot.com/2010/12/building-libmembase.html" rel="nofollow">http://trondn.blogspot.com/2010/12/building-libmembase.html</a>). You can really think of Moxi as the first “smart” client…though it can do much more.</p>
<p>- It “may” be worthwhile calling out Membase’s features of replication and the TAP interface a bit more if you like…they’re rather key to the whole system (no pun intended)</p>
<p>Thanks again and I really look forward to your continuing investigation of Membase. Please let me know if there’s anything I can do to help in your pursuit.</p>
<p>Perry Krug</p>
]]></content:encoded>
	</item>
</channel>
</rss>
<!-- WP Super Cache is installed but broken. The path to wp-cache-phase1.php in wp-content/advanced-cache.php must be fixed! -->