<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
		>
<channel>
	<title>Comments on: Ruby exit, exit!, SystemExit and at_exit blunder</title>
	<atom:link href="http://www.bigfastblog.com/ruby-exit-exit-systemexit-and-at_exit-blunder/feed" rel="self" type="application/rss+xml" />
	<link>http://www.bigfastblog.com/ruby-exit-exit-systemexit-and-at_exit-blunder</link>
	<description>Big Fast Technology</description>
	<lastBuildDate>Mon, 05 May 2014 08:14:53 +0000</lastBuildDate>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>http://wordpress.org/?v=3.0.1</generator>
	<item>
		<title>By: Phil Whelan</title>
		<link>http://www.bigfastblog.com/ruby-exit-exit-systemexit-and-at_exit-blunder/comment-page-1#comment-21914</link>
		<dc:creator>Phil Whelan</dc:creator>
		<pubDate>Wed, 19 Sep 2012 16:43:26 +0000</pubDate>
		<guid isPermaLink="false">http://www.bigfastblog.com/?p=1657#comment-21914</guid>
		<description>Thanks Jonathan for this great clarification! I think anyone who reads this post should read your comment. I will make a note of it at the bottom of the post.</description>
		<content:encoded><![CDATA[<p>Thanks Jonathan for this great clarification! I think anyone who reads this post should read your comment. I will make a note of it at the bottom of the post.</p>
]]></content:encoded>
	</item>
	<item>
		<title>By: Jonathan Rochkind</title>
		<link>http://www.bigfastblog.com/ruby-exit-exit-systemexit-and-at_exit-blunder/comment-page-1#comment-21913</link>
		<dc:creator>Jonathan Rochkind</dc:creator>
		<pubDate>Wed, 19 Sep 2012 16:08:09 +0000</pubDate>
		<guid isPermaLink="false">http://www.bigfastblog.com/?p=1657#comment-21913</guid>
		<description>After running into my own weird at_exit related bug, I discovered this MRI bug report:

http://bugs.ruby-lang.org/issues/5218

I think a LOT of people&#039;s at_exit related problems are actually due to this bug. Note that while the bug is marked fixed in the tracker, the reproduction still reproduces for me in 1.9.3p194, so I don&#039;t think it&#039;s made it into a release yet. 

And that bug report reproduction case also reveals something interesting -- you ARE allowed to call `exit` in an `at_exit` block.  It does not keep subsequent  `at_exit` blocks from running. If everything is working properly, the exit code of the last `at_exit` block to call `exit` &#039;wins&#039;. But because of that bug, everything may not be working properly.  There is a workaround with monkey-patch redefining `at_exit` in that bug report. 

That bug doesn&#039;t actually account for YOUR problem as above. Your problem was a legitimate software error -- don&#039;t call &#039;exit&#039; in an `at_exit` block unless you actually WANT to set the exit code in the `at_exit` block. If you don&#039;t, and don&#039;t need to call `exit` in it, you&#039;re fine. If you DO need to call `exit&#039; in an at_exit block to set the exit code... then the MRI bug may interfere with your desires.</description>
		<content:encoded><![CDATA[<p>After running into my own weird at_exit related bug, I discovered this MRI bug report:</p>
<p><a href="http://bugs.ruby-lang.org/issues/5218" rel="nofollow">http://bugs.ruby-lang.org/issues/5218</a></p>
<p>I think a LOT of people&#8217;s at_exit related problems are actually due to this bug. Note that while the bug is marked fixed in the tracker, the reproduction still reproduces for me in 1.9.3p194, so I don&#8217;t think it&#8217;s made it into a release yet. </p>
<p>And that bug report reproduction case also reveals something interesting &#8212; you ARE allowed to call `exit` in an `at_exit` block.  It does not keep subsequent  `at_exit` blocks from running. If everything is working properly, the exit code of the last `at_exit` block to call `exit` &#8216;wins&#8217;. But because of that bug, everything may not be working properly.  There is a workaround with monkey-patch redefining `at_exit` in that bug report. </p>
<p>That bug doesn&#8217;t actually account for YOUR problem as above. Your problem was a legitimate software error &#8212; don&#8217;t call &#8216;exit&#8217; in an `at_exit` block unless you actually WANT to set the exit code in the `at_exit` block. If you don&#8217;t, and don&#8217;t need to call `exit` in it, you&#8217;re fine. If you DO need to call `exit&#8217; in an at_exit block to set the exit code&#8230; then the MRI bug may interfere with your desires.</p>
]]></content:encoded>
	</item>
	<item>
		<title>By: David Barri</title>
		<link>http://www.bigfastblog.com/ruby-exit-exit-systemexit-and-at_exit-blunder/comment-page-1#comment-21607</link>
		<dc:creator>David Barri</dc:creator>
		<pubDate>Thu, 13 Sep 2012 13:05:24 +0000</pubDate>
		<guid isPermaLink="false">http://www.bigfastblog.com/?p=1657#comment-21607</guid>
		<description>What a coincidence! I just blogged about something very similar!
http://japgolly.blogspot.com.au/2012/09/problems-with-atexit-and-exit-and-rspec.html

Nice.</description>
		<content:encoded><![CDATA[<p>What a coincidence! I just blogged about something very similar!<br />
<a href="http://japgolly.blogspot.com.au/2012/09/problems-with-atexit-and-exit-and-rspec.html" rel="nofollow">http://japgolly.blogspot.com.au/2012/09/problems-with-atexit-and-exit-and-rspec.html</a></p>
<p>Nice.</p>
]]></content:encoded>
	</item>
	<item>
		<title>By: Deryl R. Doucette</title>
		<link>http://www.bigfastblog.com/ruby-exit-exit-systemexit-and-at_exit-blunder/comment-page-1#comment-21574</link>
		<dc:creator>Deryl R. Doucette</dc:creator>
		<pubDate>Wed, 12 Sep 2012 13:14:36 +0000</pubDate>
		<guid isPermaLink="false">http://www.bigfastblog.com/?p=1657#comment-21574</guid>
		<description>Yes, did not know about the abort() either! I&#039;ve been hardcoding &#039;exit 255&#039; in my scripts. Thanks!</description>
		<content:encoded><![CDATA[<p>Yes, did not know about the abort() either! I&#8217;ve been hardcoding &#8216;exit 255&#8242; in my scripts. Thanks!</p>
]]></content:encoded>
	</item>
	<item>
		<title>By: Rick Hull</title>
		<link>http://www.bigfastblog.com/ruby-exit-exit-systemexit-and-at_exit-blunder/comment-page-1#comment-21450</link>
		<dc:creator>Rick Hull</dc:creator>
		<pubDate>Mon, 10 Sep 2012 00:03:25 +0000</pubDate>
		<guid isPermaLink="false">http://www.bigfastblog.com/?p=1657#comment-21450</guid>
		<description>&gt; Yes, I think putting a “exit” inside an “at_exit” block makes no sense

Pardon the phrase, but this is the real WTF.  Maybe at_exit good practices would be a good blog post.  I&#039;ve never had to use it so I&#039;ve never looked into it myself.  Also, I wholeheartedly recommend Avdi&#039;s exceptional book.</description>
		<content:encoded><![CDATA[<p>&gt; Yes, I think putting a “exit” inside an “at_exit” block makes no sense</p>
<p>Pardon the phrase, but this is the real WTF.  Maybe at_exit good practices would be a good blog post.  I&#8217;ve never had to use it so I&#8217;ve never looked into it myself.  Also, I wholeheartedly recommend Avdi&#8217;s exceptional book.</p>
]]></content:encoded>
	</item>
	<item>
		<title>By: Phil Whelan</title>
		<link>http://www.bigfastblog.com/ruby-exit-exit-systemexit-and-at_exit-blunder/comment-page-1#comment-21438</link>
		<dc:creator>Phil Whelan</dc:creator>
		<pubDate>Sun, 09 Sep 2012 17:54:06 +0000</pubDate>
		<guid isPermaLink="false">http://www.bigfastblog.com/?p=1657#comment-21438</guid>
		<description>Great tip Avdi. I love shameless self-promotions! ;)</description>
		<content:encoded><![CDATA[<p>Great tip Avdi. I love shameless self-promotions! <img src='http://www.bigfastblog.com/wp-includes/images/smilies/icon_wink.gif' alt=';)' class='wp-smiley' /> </p>
]]></content:encoded>
	</item>
	<item>
		<title>By: Avdi Grimm</title>
		<link>http://www.bigfastblog.com/ruby-exit-exit-systemexit-and-at_exit-blunder/comment-page-1#comment-21437</link>
		<dc:creator>Avdi Grimm</dc:creator>
		<pubDate>Sun, 09 Sep 2012 17:28:59 +0000</pubDate>
		<guid isPermaLink="false">http://www.bigfastblog.com/?p=1657#comment-21437</guid>
		<description>You can always find out what the exit status is by looking at the SystemExit exception, which will be found in `$!` (aka `$ERROR_INFO` if you require &#039;English&#039;). If I may shamelessly self-promote for a moment, I go into this in depth in &lt;a href=&quot;http://exceptionalruby.com&quot; rel=&quot;nofollow&quot;&gt;Exceptional Ruby&lt;/a&gt;.</description>
		<content:encoded><![CDATA[<p>You can always find out what the exit status is by looking at the SystemExit exception, which will be found in `$!` (aka `$ERROR_INFO` if you require &#8216;English&#8217;). If I may shamelessly self-promote for a moment, I go into this in depth in <a href="http://exceptionalruby.com" rel="nofollow">Exceptional Ruby</a>.</p>
]]></content:encoded>
	</item>
	<item>
		<title>By: Phil Whelan</title>
		<link>http://www.bigfastblog.com/ruby-exit-exit-systemexit-and-at_exit-blunder/comment-page-1#comment-21436</link>
		<dc:creator>Phil Whelan</dc:creator>
		<pubDate>Sun, 09 Sep 2012 17:12:33 +0000</pubDate>
		<guid isPermaLink="false">http://www.bigfastblog.com/?p=1657#comment-21436</guid>
		<description>Good question, Jonathan. Yes, I think putting a &quot;exit&quot; inside an &quot;at_exit&quot; block makes no sense, because the application is already in the process of exiting. Putting an &quot;exit!&quot; instead of an &quot;at_exit&quot; block should also be avoided. If you have multiple at_exit blocks then this would cause some to run and others not to run, because one of the blocks decided to do this hard exit. It is technically possible to reason about the order in which these &quot;at_exit&quot; blocks execute (&quot;If multiple handlers are registered, they are executed in reverse order of registration&quot;), but who is going to keep track of this? It makes for better code to avoid &quot;exit&quot; or &quot;exit!&quot; within &quot;at_exit&quot; blocks altogether, especially a soft exit (&quot;exit&quot;). It is possible that some code within an at_exit block realizes that a situation has occurred where it needs to hard exit (&quot;exit!&quot;), so that nothing else is executed, but I would try to re-engineer the code so that this is not needed.</description>
		<content:encoded><![CDATA[<p>Good question, Jonathan. Yes, I think putting a &#8220;exit&#8221; inside an &#8220;at_exit&#8221; block makes no sense, because the application is already in the process of exiting. Putting an &#8220;exit!&#8221; instead of an &#8220;at_exit&#8221; block should also be avoided. If you have multiple at_exit blocks then this would cause some to run and others not to run, because one of the blocks decided to do this hard exit. It is technically possible to reason about the order in which these &#8220;at_exit&#8221; blocks execute (&#8220;If multiple handlers are registered, they are executed in reverse order of registration&#8221;), but who is going to keep track of this? It makes for better code to avoid &#8220;exit&#8221; or &#8220;exit!&#8221; within &#8220;at_exit&#8221; blocks altogether, especially a soft exit (&#8220;exit&#8221;). It is possible that some code within an at_exit block realizes that a situation has occurred where it needs to hard exit (&#8220;exit!&#8221;), so that nothing else is executed, but I would try to re-engineer the code so that this is not needed.</p>
]]></content:encoded>
	</item>
	<item>
		<title>By: Jonathan Rochkind</title>
		<link>http://www.bigfastblog.com/ruby-exit-exit-systemexit-and-at_exit-blunder/comment-page-1#comment-21430</link>
		<dc:creator>Jonathan Rochkind</dc:creator>
		<pubDate>Sun, 09 Sep 2012 13:44:07 +0000</pubDate>
		<guid isPermaLink="false">http://www.bigfastblog.com/?p=1657#comment-21430</guid>
		<description>&lt;blockquote&gt;at_exit blocks are used with great caution and echo the original exit status when necessary.&lt;/blockquote&gt;

Any clue on how one would do this, is there any way an &quot;at_exit&quot; block can access the &#039;original exit status&#039;?

Or wait, is the key thing just that you do not need to and should not call `exit` inside `at_exit` -- at_exit shoudl do it&#039;s thing without calling `exit`, and then when it&#039;s done being executed the process will still exit on it&#039;s own, with the original exit value. Is that right?</description>
		<content:encoded><![CDATA[<blockquote><p>at_exit blocks are used with great caution and echo the original exit status when necessary.</p></blockquote>
<p>Any clue on how one would do this, is there any way an &#8220;at_exit&#8221; block can access the &#8216;original exit status&#8217;?</p>
<p>Or wait, is the key thing just that you do not need to and should not call `exit` inside `at_exit` &#8212; at_exit shoudl do it&#8217;s thing without calling `exit`, and then when it&#8217;s done being executed the process will still exit on it&#8217;s own, with the original exit value. Is that right?</p>
]]></content:encoded>
	</item>
	<item>
		<title>By: Phil Whelan</title>
		<link>http://www.bigfastblog.com/ruby-exit-exit-systemexit-and-at_exit-blunder/comment-page-1#comment-21418</link>
		<dc:creator>Phil Whelan</dc:creator>
		<pubDate>Sun, 09 Sep 2012 04:58:24 +0000</pubDate>
		<guid isPermaLink="false">http://www.bigfastblog.com/?p=1657#comment-21418</guid>
		<description>Great tip Avdi! I&#039;ve not used abort() before.</description>
		<content:encoded><![CDATA[<p>Great tip Avdi! I&#8217;ve not used abort() before.</p>
]]></content:encoded>
	</item>
	<item>
		<title>By: Avdi Grimm</title>
		<link>http://www.bigfastblog.com/ruby-exit-exit-systemexit-and-at_exit-blunder/comment-page-1#comment-21416</link>
		<dc:creator>Avdi Grimm</dc:creator>
		<pubDate>Sun, 09 Sep 2012 04:21:31 +0000</pubDate>
		<guid isPermaLink="false">http://www.bigfastblog.com/?p=1657#comment-21416</guid>
		<description>A good reminder; not enough people understand Ruby&#039;s process termination system. Incidentally, I prefer `abort(&quot;Some error message&quot;)` to `exit(1)`. It sets the exit status to 1, and also sets the error message in the SystemExit exception.</description>
		<content:encoded><![CDATA[<p>A good reminder; not enough people understand Ruby&#8217;s process termination system. Incidentally, I prefer `abort(&#8220;Some error message&#8221;)` to `exit(1)`. It sets the exit status to 1, and also sets the error message in the SystemExit exception.</p>
]]></content:encoded>
	</item>
</channel>
</rss>
<!-- WP Super Cache is installed but broken. The path to wp-cache-phase1.php in wp-content/advanced-cache.php must be fixed! -->